How to install WordPress with Ubuntu 20.04 and a LAMP Stack

LAMP stands for Linux, Apache MySQL, PHP

Step 1: Install Apache
Open the terminal on your Ubuntu system. The terminal is a text interface to your computer, which you will use to run all the commands.

First, update your software package list.

ubuntu@ubunu2004:~$ sudo apt-get update

The next step in setting up the LAMP stack will be installing and configuring Apache2, the web server. Run the below command to install Apache 2 on Ubuntu 20.04.

ubuntu@ubunu2004:~$ sudo apt install apache2

It is necessary to allow Apache2 to start at the system boot time and to start the service to verify its status as well.

ubuntu@ubunu2004:~$ sudo systemctl enable apache2

ubuntu@ubunu2004:~$ sudo systemctl status apache2

Open your web browser, and type localhost in the address box to verify that the Apache server has been started.

If the Apache2 web server is running, it will display the default Apache2 index page.

Step 2: Install MySQL
After Apache has been started, it is time to install MySQL. Run the following command in the terminal to do this:

ubuntu@ubunu2004:~$ sudo apt install mysql-server

It is highly recommended that you run a security program after the database server has been installed to remove unsecure default settings and protect your database.

ubuntu@ubunu2004:~$ sudo mysql_secure_installation

You will be asked to install the validate_password plugin. So, type Y/Yes, then press Enter and finally choose the default password strength.

To answer the remaining questions, press Y and hit the ENTER key for each prompt.

This command will also enable MySQL to begin on boot.

ubuntu@ubunu2004:~$ sudo systemctl enable mysql

ubuntu@ubunu2004:~$ sudo systemctl status mysql

Step 3: Install PHP

The following command will install PHP along with the MySQL and Apache modules:

ubuntu@ubunu2004:~$ sudo apt install php libapache2-mod-php php-mysql

WordPress and many plugins use PHP extensions, which you will need to install manually.

ubuntu@ubunu2004:~$ sudo apt install php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip
 
ubuntu@ubunu2004 :$ php -v

After PHP has been installed and any required extensions have been installed, Apache must be restarted to load the new extensions.

ubuntu@ubunu2004:~$ sudo systemctl restart apache2

Step 4: Install WordPress
Once we have set up our LAMP environment, we can begin installing WordPress. First, we will download the WordPress installation files and place them in the default web server root directory /var/www/html.

ubuntu@ubunu2004:~$ cd /var/www/html
Now download the latest WordPress install with the following command.

ubuntu@ubunu2004:/var/www/html$ sudo wget -c http://wordpress.org/latest.tar.gz

Extract the files

ubuntu@ubunu2004:/var/www/html$ sudo tar -xzvf latest.tar.gz

ubuntu@ubunu2004:/var/www/html$ ls -l

The extracted WordPress files will be now placed in the WordPress directory at the following location on your server 

/var/www/html/wordpress

The user of your web server must own these files.

We are using Apache as our web server. Apache is running on Ubuntu 20.04. The following command will allow you to change the owner of these files and set the appropriate permissions:

ubuntu@ubunu2004: sudo chown -R www-data:www-data /var/www/html/wordpress

Step 5: Create a Database for WordPress
Next, we will create a WordPress database for the site and set up a user account. This will make it easier to manage the site and increase its security.

Log in to your MySQL root account via Terminal by entering:

When prompted, enter the MySQL root password we have previously set up.

ubuntu@ubunu2004:/var/www/html$ sudo mysql -u root -p

Create a separate database for WordPress to manage

CREATE DATABASE demo_db;

To access the new database, we will create a MySQL user account. Enter a strong password

CREATE USER demo_user@localhost IDENTIFIED BY 'demo-password';

You have just created a new user.

GRANT ALL PRIVILEGES ON demo_db. * TO demo_user@localhost;
After completing the above, flush your privileges to allow MySQL to implement the changes.

FLUSH PRIVILEGES;

exit;

//example 
CREATE DATABASE wordpress;
CREATE USER 'wordpressuser'@'localhost' IDENTIFIED BY 'password';
GRANT ALL PRIVILEGES ON wordpress.* TO 'wordpressuser'@'localhost';
FLUSH PRIVILEGES;
EXIT;

Allow the executable permission to be granted to the WordPress folder.

ubuntu@ubunu2004:/var/www/html$ sudo chmod -R 777 wordpress/

ubuntu@ubunu2004:/var/www/html$ cd wordpress/

Step 6: Setup and Configure WordPress
After setting up a database for WordPress, the next and final step is to set up and configure WordPress. Firstly, you need to create a configuration file for WordPress. So, rename the sample WordPress configuration file using the following command:

ubuntu@ubunu2004:/var/www/html/wordpress$ mv wp-config-sample.php wp-config.php
Edit the wpconfig. As shown below, edit the php file.

ubuntu@ubunu2004:/var/www/html/wordpress$ gedit wp-config.php

Update the database settings by replacing demo_db, demo_user, and demo_password with your own details.

//if not working gedit then

Step 6: Configure WordPress

cd /var/www/html/
sudo mv wp-config-sample.php wp-config.php
sudo nano wp-config.php
Update the database details in the wp-config.php file:


define('DB_NAME', 'wordpress');
define('DB_USER', 'wordpressuser');
define('DB_PASSWORD', 'password');
Save and close the file.[ So, after making changes to the wp-config.php file, follow these steps:

Press Ctrl + O
Press Enter
Press Ctrl + X

Once you have done this, you can access your WordPress page to finish the installation. Open the browser and go to https://localhost/wordpress/

The next screen will open. Click on Continue to select the language.
Click on “Install WordPress” to enter your preferred information, including site title, username, and password.

Site Title: Enter the WordPress website name. We recommend entering the domain name to optimize your site.
Username: Create a new username to log in to WordPress.
Password: Create a password to protect your WordPress account.
Your email: Add your email address to receive updates and notifications.
Search engine visibility: You can leave this box unchecked to prevent search engines from indexing your site until it’s ready.
